name: Solidity Security Tests

on:
  pull_request:
    branches: ["main"]

jobs:
  security-tests:
    name: Run Security Analysis
    runs-on: ubuntu-latest
    container: trailofbits/eth-security-toolbox

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install yarn
      run: npm install -g yarn

    - name: Cache yarn packages
      uses: actions/cache@v3
      id: yarn-cache
      with:
        path: |
          merkle-store-hardhat/node_modules
          merkle-store-hardhat/.yarn/cache
        key: ${{ runner.os }}-yarn-${{ hashFiles('merkle-store-hardhat/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install project dependencies
      run: |
        cd merkle-store-hardhat
        yarn install --frozen-lockfile
        cd ..

    - name: Run Slither and generate Markdown report
      id: slither
      continue-on-error: true
      run: |
        echo "Running Slither analysis..."
        cd merkle-store-hardhat
        slither . \
          --exclude assembly,low-level-calls,naming-convention,pragma,solc-version,unused-return \
          --show-ignored-findings \
          --checklist \
          --markdown-root "../" \
          > ../slither.md 2>&1 || echo "Slither completed with findings"

        # Add status indicator
        if grep -q "\[ \]" ../slither.md; then
          echo "SLITHER_STATUS=‚ö†Ô∏è" >> $GITHUB_ENV
        else
          echo "SLITHER_STATUS=‚úÖ" >> $GITHUB_ENV
        fi

        echo "SLITHER_REPORT<<EOF" >> $GITHUB_ENV
        cat ../slither.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Upload Slither report artifact
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: slither-security-report
        path: slither.md

    - name: Create PR comment
      uses: actions/github-script@v6
      if: always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const formatReport = (raw) => {
            if (!raw) return '## üö® No Slither Report Generated';
            
            const findings = raw.split('\n')
              .filter(line => line.includes('- [ ]'))
              .map(f => f.replace('- [ ]', '‚ùå'));
              
            const passed = raw.split('\n')
              .filter(line => line.includes('- [X]'))
              .map(f => f.replace('- [X]', '‚úì'));

            return `
          ## üîç Slither Security Report ${process.env.SLITHER_STATUS}

          ${findings.length ? `
          ### ‚ö†Ô∏è Findings (${findings.length})
          ${findings.join('\n')}
          ` : ''}

          ${passed.length ? `
          ### ‚úÖ Passed Checks
          <details>
          <summary>Show ${passed.length} passed items</summary>
          ${passed.join('\n')}
          </details>
          ` : ''}

          üìä **Scan Summary**  
          ‚Ä¢ Contracts: ${(raw.match(/analyzed \((\d+) contracts/) || [])[1] || 'N/A'}  
          ‚Ä¢ Detectors: ${(raw.match(/(\d+) detectors/) || [])[1] || 'N/A'}  
          ‚Ä¢ Timestamp: ${new Date().toISOString()}

          [Download Full Report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                      `;
                    };

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: formatReport(process.env.SLITHER_REPORT)
          });